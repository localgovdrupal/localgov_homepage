<?php

/**
 * @file
 * Hook implementations.
 */

declare(strict_types = 1);

use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 *
 * - Overrides paragraph template for Newsroom teaser, Homepage icons, and
 *   Homepage IA blocks.
 * - Overrides field template for field_newsroom, field_homepage_icons, and
 *   field_ia_blocks.
 */
function localgov_homepage_theme($existing, $type, $theme, $path) {

  return [
    'paragraph__newsroom_teasers' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__homepage_icons' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__homepage_ia_blocks' => [
      'base hook' => 'paragraph',
    ],
    'field__field_newsroom' => [
      'base hook' => 'field',
    ],
    'field__field_homepage_icons' => [
      'base hook' => 'field',
    ],
    'field__field_ia_blocks' => [
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for hook_preprocess_paragraph().
 */
function localgov_homepage_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->bundle() === 'homepage_icons') {
    // Set url in plain text as renderable field in the template.
    if (!$paragraph->get('field_link')->isEmpty()) {
      $link = $paragraph->get('field_link')->first()->getValue();
      $variables['field_link'] = Url::fromUri($link['uri'])->toString();
    }

    // Create a attributes object to add font awesome classes to div.
    if (!$paragraph->get('field_icon')->isEmpty()) {
      $icon = $paragraph->get('field_icon')->first()->getValue();
      $variables['icon_attributes'] = new Attribute([
        'class' => [
          'services--feature-icon',
          $icon['style'],
          'fa-' . $icon['icon_name'],
        ],
      ]);
    }
  }

  if ($paragraph->bundle() === 'homepage_ia_blocks') {
    // Check if paragraph is promoted.
    $variables['promoted'] = (bool) $paragraph->get('field_promoted')->first()->getValue()['value'];

    // Set url in plain text as renderable field in the template.
    if (!$paragraph->get('field_link')->isEmpty()) {
      $link = $paragraph->get('field_link')->first()->getValue();
      $variables['field_link'] = Url::fromUri($link['uri'])->toString();
    }

    $links = [];
    foreach ($paragraph->get('field_links')->getValue() as $link) {
      $links[] = [
        'title' => $link['title'],
        'url' => Url::fromUri($link['uri']),
      ];
    }

    $variables['list'] = [
      '#theme' => 'links',
      '#links' => $links,
      '#attributes' => [
        'class' => [$variables['promoted'] ? 'business-list' : ''],
      ],
    ];

    $variables['#attached']['library'][] = 'fontawesome/fontawesome.webfonts.regular';
  }
}
